@import "./variables";
@import "./helpers";

/********************************************************************************
 * Define some helper classes.
 ********************************************************************************/

/**
  * Used to display multiple line (in column) and define a smaller
  * font-size on non first of type items.
  */
.m-multiline {
  display: flex;
  flex-direction: column;
  font-size: $list-item-fz;

  > * {
    &:not(:first-of-type) {
      font-size: $list-item-fz-secondary;

      body.dark-theme & {
        opacity: 0.7;
      }
      body.light-theme & {
        opacity: 0.87;
      }
    }
  }
}

/**
 * Helper classes to add background dark behavior according to the elevation values.
 */
@each $elevation, $value in $dark-theme-elevation-colors {
  /**
   * @deprecated use the dark-overlay-X and light-overlay instead.
   */
  .m-elevation-#{$elevation} {
    body.dark-theme &:not(.exclude-dark) {
      background: dark-color-overlay($elevation);

      &.mat-list-item {
        &:focus,
        &:hover {
          background: dark-color-overlay($elevation);
        }
      }
    }
    body.light-theme &:not(.exclude-light) {
      background: map-get($light-theme-background, background);

      &.mat-list-item {
        &:focus,
        &:hover {
          background: shade(map-get($light-theme-background, background), $elevation);
        }
      }
    }
  }

  .dark-overlay-#{$elevation} {
    body.dark-theme & {
      background: dark-color-overlay($elevation);

      &.mat-list-item {
        &:focus,
        &:hover {
          background: dark-color-overlay($elevation);
        }
      }
    }
  }
}

.light-overlay {
  body.light-theme & {
    background: map-get($light-theme-background, background);

    &.mat-list-item {
      &:focus,
      &:hover {
        background: shade(map-get($light-theme-background, background), 8);
      }
    }

    &-inner {
      background: map-get($light-theme-background, content);
    }
  }
}

/**
 * Helper classes to build flex layout.
 */
.layout {
  display: flex;

  &.column {
    flex-direction: column;
  }

  &.align-center {
    align-items: center;
  }

  &.content-between {
    justify-content: space-between;
  }

  &.content-around {
    justify-content: space-around;
  }

  &.content-center {
    justify-content: center;
  }

  &.content-start {
    justify-content: flex-start;
  }

  &.align-start {
    align-items: flex-start;
  }

  &.wrap {
    flex-wrap: wrap;
  }

  &.no-wrap {
    flex-wrap: nowrap;
  }

  > .flex {
    flex: 1;
    min-width: 0;
  }
}

.align-self-end {
  align-self: flex-end;
}

.sticky {
  position: sticky;
  top: 0;
}

/**
 * Helper classes for icons.
 * Available classes: .m-icon, .[m-]icon[[-very]-large], .m-icon.important
 */
.m-icon,
.icon {
  &-left {
    @include icon-margin(right);
  }

  &-right {
    @include icon-margin(left);
  }

  &.important {
    height: $icon-large;
    width: $icon-large;
    font-size: $icon-large;

    body.dark-theme & {
      color: map-get($dark-primary, default);
    }
    body.light-theme & {
      color: map-get($light-primary, default);
    }
  }
}

/**
 * Helper classes for text.
 */
.ellipsis {
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
  display: block;
}

/**
 * Helper class to add a background image on bottom of a scrollable container.
 * TODO
 */
.end-with-bg {
  padding-bottom: $end-bg-size;
}

.drop-shadow {
  @include drop-shadow();
}

.circle {
  border-radius: 50%;
  overflow: hidden;
}

.rounded {
  overflow: hidden;

  &:not(&--top) {
    border-radius: $shape-radius;
  }

  &--top {
    border-top-left-radius: $shape-radius;
    border-top-right-radius: $shape-radius;
  }
}

.spacing-iphone-X {
  padding-bottom: env(safe-area-inset-bottom) !important;
  margin-left: env(safe-area-inset-left) !important;
}

@supports (padding: max(0px)) {
  .spacing-iphone-X {
    padding-bottom: max(var($spacing), env(safe-area-inset-bottom)) !important;
  }
}

@supports (margin: max(0px)) {
  .spacing-iphone-X {
    margin-left: max(var($spacing), env(safe-area-inset-left)) !important;
  }
}

.margin {
  &--right {
    margin-right: $spacing * 2 !important;
  }
  &--left {
    margin-left: $spacing * 2 !important;
  }
  &--bottom {
    margin-bottom: $spacing !important;

    &---small {
      margin-bottom: $spacing / 2 !important;
    }
    &---big {
      margin-bottom: $spacing * 2 !important;
    }
  }
}

.padding {
  @mixin padding($t: $spacing, $r: $spacing, $b: $spacing, $l: $spacing) {
    &---spacing {
      padding: $t $r $b $l;
    }
    &---spacing-2 {
      padding: $t * 2 $r * 2 $b * 2 $l * 2;
    }
    &---spacing-small {
      padding: $t * 0.5 $r * 0.5 $b * 0.5 $l * 0.5;
    }
  }

  &--top {
    @include padding($spacing, 0, 0, 0);
  }
  &--bottom {
    @include padding(0, 0, $spacing, 0);
  }
  &--left {
    @include padding(0, 0, 0, $spacing);
  }
  &--right {
    @include padding(0, $spacing, 0, 0);
  }
  &--all {
    @include padding();
  }
  &--tb {
    @include padding($spacing, 0, $spacing, 0);
  }
  &--lr {
    @include padding(0, $spacing, 0, $spacing);
  }
}

.m-fz-small {
  font-size: $default-fz-small !important;
  line-height: $default-fz-small !important;
}

.dark-only {
  body:not(.dark-theme) & {
    display: none;
  }
}

.light-only {
  body:not(.light-theme) & {
    display: none;
  }
}

.text-secondary {
  body.dark-theme & {
    color: map-get($dark-theme-foreground, text);
    opacity: 0.7;
  }
  body.light-theme & {
    color: map-get($light-theme-foreground, text);
    opacity: 0.87;
  }
}
