@import "./variables";

/**
 * Slightly lighten a color
 * @access public
 * @param {Color} $color - color to tint
 * @param {Number} $percentage - percentage of `$color` in returned color
 * @return {Color}
 **/
@function tint($color, $percentage) {
	@return mix(white, $color, $percentage);
}

/**
 * Slightly darken a color
 * @access public
 * @param {Color} $color - color to shade
 * @param {Number} $percentage - percentage of `$color` in returned color
 * @return {Color}
 **/
@function shade($color, $percentage) {
	@return mix(black, $color, $percentage);
}

$dark-theme-elevation-colors: (
	// 0: 0,
		// 1: 0.05,
		// 2: 0.07,
		// 3: 0.08,
		// 4: 0.09,
		// 6: 0.11,
		// 8: 0.12,
		// 12: 0.14,
		// 16: 0.15,
		// 24: 0.16
		0: 0%,
	1: 5%,
	2: 7%,
	3: 8%,
	4: 9%,
	6: 11%,
	8: 12%,
	12: 14%,
	16: 15%,
	24: 16%
);

/**
 * Follow the material dark theme best practices, use the same elevation values to calculate a color + transparency.
 *
 * Return an rgba color according to the $elevation parameter.
 **/
@function dark-color-overlay($elevation) {
	// @return rgba(map-get($dark-theme-background, overlay), map-get($dark-theme-elevation-colors, $elevation));
	@return tint(map-get($dark-theme-background, background), map-get($dark-theme-elevation-colors, $elevation));
}

@mixin full-height() {
	height: calc(100vh - #{$toolbar-main-nav-height});
}

@mixin simple-page() {
	@include full-height();

	display: block;
	width: 100%;
	position: relative;
	pointer-events: auto;
	overflow-y: auto;
	align-self: flex-start;

	body.dark-theme & {
		background: map-get($dark-theme-background, background);
	}
	body.light-theme & {
		background: map-get($light-theme-background, background);
	}

	.m-toolbar {
		position: fixed;
	}
}

@mixin drop-shadow() {
	body.dark-theme & {
		box-shadow: $dark-box-shadow;
	}
	body.light-theme & {
		box-shadow: $light-box-shadow;
	}
}
